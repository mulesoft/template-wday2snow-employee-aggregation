<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:workday="http://www.mulesoft.org/schema/mule/workday"
      xmlns:servicenow="http://www.mulesoft.org/schema/mule/servicenow" xmlns:email="http://www.mulesoft.org/schema/mule/email"
	  xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
      xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/email http://www.mulesoft.org/schema/mule/email/current/mule-email.xsd
http://www.mulesoft.org/schema/mule/servicenow http://www.mulesoft.org/schema/mule/servicenow/current/mule-servicenow.xsd
http://www.mulesoft.org/schema/mule/workday http://www.mulesoft.org/schema/mule/workday/current/mule-workday.xsd">
    <flow name="businesslogicFlow">
        <set-payload value="[]" doc:name="Set Payload to avoid issue with scatter-gather" doc:id="e92bc13f-0e3e-4ec1-b744-4231aee4e4a9" />
        <scatter-gather doc:name="Scatter-Gather">
			<route >
				<ee:transform doc:name="Prepare Get Workers request" doc:id="5ddb1536-1e04-4131-b020-a946b4d430b1">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/xml
ns ns0 urn:com.workday/bsvc
---
{
	ns0#Get_Workers_Request: {
		ns0#Request_Criteria: {
			ns0#Exclude_Inactive_Workers: true
		},
		ns0#Response_Filter: {
			ns0#Count: p('page.size')
		},
		ns0#Response_Group: {
			ns0#Include_Reference: true,
			ns0#Include_Personal_Information: true
		}
	}
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<workday:human-resources operation="Get_Workers" doc:name="Get workers from Workday" doc:id="81dffae2-1238-4475-a7a2-f3d49e8d7d27" config-ref="Workday_Config" />
				<ee:transform doc:name="Prepare Workday data to aggregation" doc:id="f2114fbc-b82d-48ed-be3b-980252e6f446">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/java
ns ns0 urn:com.workday/bsvc
---
payload.ns0#Get_Workers_Response.ns0#Response_Data.*ns0#Worker map ((worker , indexOfWorker) -> {
	Id: worker.ns0#Worker_Reference.ns0#ID,
	Name: worker.ns0#Worker_Data.ns0#Personal_Data.ns0#Name_Data.ns0#Legal_Name_Data.ns0#Name_Detail_Data.@ns0#Formatted_Name,
	Email: worker.ns0#Worker_Data.ns0#Personal_Data.ns0#Contact_Data.ns0#Email_Address_Data.ns0#Email_Address,
	Username: worker.ns0#Worker_Data.ns0#User_ID
})]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</route>
			<route >
				<ee:transform doc:name="Create getRecords Request" doc:id="0543e742-d7aa-424c-a7d7-f2e8d7667e12">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/xml
ns ns0 http://www.service-now.com/sys_user
---
{
	ns0#getRecords: {
		ns0#"__limit": p('page.size')
	}
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<servicenow:invoke operation="getRecords" doc:name="get Users from ServiceNow" doc:id="46588e07-eb34-4797-914b-b58f6fb68217" config-ref="ServiceNow_Config" service="sys_user" />
				<ee:transform doc:name="Prepare ServiceNow data to aggregation" doc:id="436ffaba-3608-4dae-9059-f818d3c11f6f">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/java
---
payload.body.getRecordsResponse.*getRecordsResult map {
    Id: $.sys_id,
    Name: $.name,
    Email: $.email,
    Username: $.user_name
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</route>
        </scatter-gather>
        <ee:transform doc:name="Aggregate results and transform to CSV" doc:id="4b662e7a-dbb3-43d0-ac7a-86d969e38be8">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/csv separator=","
import mergeWith from dw::core::Objects
var workers = payload["0"].payload map (item) -> {
	"IDInWorkday": item.Id,
	"NameInWorkday": item.Name,
	"Email": item.Email,
	"UserNameInWorkday": item.Username
}
var users = payload["1"].payload map (item) -> {
	"IDInServiceNow": item.Id,
	"NameInServiceNow": item.Name,
	"Email": item.Email,
	"UserNameInServiceNow": item.Username
}
var mergedItems =  (
                workers map ((item) -> item mergeWith ((users filter ($.Email == item.Email))[0]
                     default {IDInServiceNow: "", NameInServiceNow: "", UserNameInServiceNow: ""}
                ))
            ) distinctBy $.Email
            ++ (
                users map ((item) -> item mergeWith ((workers filter ($.Email == item.Email))[0]
                     default {IDInWorkday: "", NameInWorkday: "", UserNameInWorkday: ""}
                ))
            ) distinctBy $.Email
fun sortBySourceExistence (items) = ((items map (item) -> (
        item ++ {
            sortValue:  if ((item.IDInWorkday != "") and (item.IDInServiceNow == "")) 1
                        else if ((item.IDInServiceNow != "") and (item.IDInWorkday == "")) 2
                        else 3
        }
    )
) orderBy $.sortValue ) map $ -"sortValue"
---
sortBySourceExistence(mergedItems) map (item) -> {
	"Email": item.Email,
	"IDInWorkday": item.IDInWorkday,
	"NameInWorkday": item.NameInWorkday,
	"UserNameInWorkday": item.UserNameInWorkday,
	"IDInServiceNow": item.IDInServiceNow,
	"NameInServiceNow": item.NameInServiceNow,
	"UserNameInServiceNow": item.UserNameInServiceNow
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
        <email:send config-ref="Gmail_SMTP" doc:name="Send migration result email" fromAddress="${mail.from}"
                    subject="${mail.subject}">
            <email:to-addresses>
                <email:to-address value="${mail.to}"/>
            </email:to-addresses>
            <email:body contentType="text/plain">
                <email:content><![CDATA[${mail.body}]]></email:content>
            </email:body>
            <email:attachments><![CDATA[#[{'${attachment.name}' : payload}]]]></email:attachments>

        </email:send>
	</flow>
	<flow name="mainFlow">
        <flow-ref doc:name="Call businesslogicFlow" name="businesslogicFlow"/>
        <error-handler>
            <on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" type="ANY">
                <flow-ref doc:name="errorHandlingFlow" name="errorHandlingFlow"/>
            </on-error-propagate>
        </error-handler>
    </flow>

</mule>

        